package com.NNTechie.QuizApp.Configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import com.NNTechie.QuizApp.Security.UserInfoUserDetailsService;

@Configuration
@EnableMethodSecurity
@EnableWebSecurity
public class QuizAppCfg {
	
	@Bean
	public UserDetailsService userDetailsService(PasswordEncoder passwordEncoder) {
		UserDetails admin = User.withUsername("nnsaibhanu@gmail.com")
				.password(passwordEncoder.encode("123"))
				.roles("ADMIN")
				.build();
		UserDetails user = User.withUsername("abc@gmail.com")
				.password(passwordEncoder.encode("456"))
				.roles("USER")
				.build();
		return new InMemoryUserDetailsManager(admin,user);
//		return new UserInfoUserDetailsService();
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		return http.csrf().disable()
		.authorizeHttpRequests()
		.requestMatchers("/add/user").permitAll()
		.requestMatchers("/admin/access/**","/user/access/**").authenticated()
		.and().formLogin()
		.and().build();
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	
	@Bean
	public AuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider dAo = new DaoAuthenticationProvider();
		dAo.setUserDetailsService(userDetailsService());
		dAo.setPasswordEncoder(passwordEncoder());
		return dAo;
	}
}
